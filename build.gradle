/*
 * Copyright (c) Libly - Terl Tech Ltd  • 24/08/2019, 16:01 • libly.co, goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

plugins {
    id 'java-library'
    id 'application'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'signing'
    id 'maven'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id 'osgi'
}

ext {
    artifactId = "resource-loader"
    groupId = "co.libly"
    version = '1.3.8-SNAPSHOT'
    description = "Resource Loader gives you the functions to load resource files inside or outside JARs."
}


group project.ext.groupId
version = project.ext.version
mainClassName = "co.libly.resourceloader.Main"
sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.assertj:assertj-core:3.13.2"
    testImplementation "org.testng:testng:7.0.0-beta7"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testImplementation "net.jodah:concurrentunit:0.4.6"
    implementation "net.java.dev.jna:jna:5.5.0"
}


test {
    useTestNG()
    scanForTestClasses = false
    testLogging {
        events "passed", "skipped", "failed"
    }
}


jar {
    manifest {
        attributes(
            'Main-Class': 'co.libly.resourceloader.Main'
        )
    }
}



// Tasks
signing {
    // This will use the GPG Agent
    // to sign the jar
    useGpgCmd()
    sign configurations.archives
}

compileJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}


task signPom(type: Sign) {
    sign project.file("$buildDir/publications/mavenJava/pom-default.xml")

    // The signing plugin does not seem to notice
    // it when the publications folder with the
    // signature has been deleted. So we always
    // create a new signature
    outputs.upToDateWhen { false }
}


artifacts {
    archives sourcesJar, javadocJar
}

tasks.withType(Sign)*.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId project.ext.groupId
            artifactId project.ext.artifactId
            version project.ext.version
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.ext.description)
                root.appendNode('name', project.ext.artifactId)
                root.appendNode('url', 'https://github.com/libly/resource-loader')

                def scm = root.appendNode('scm')
                scm.appendNode("connection", "scm:git:git://github.com/libly/resource-loader.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com/libly/resource-loader")
                scm.appendNode("url", "http://github.com/libly/resource-loader")

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'MIT')
                license.appendNode('url', 'https://opensource.org/licenses/MIT')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'Libly')
                developer.appendNode('email', 'hello@libly.co')
            }
        }
    }
}


bintray {
    user = findProperty("bintray.user")
    key = findProperty("bintray.apiKey")
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'maven'
        name = project.ext.artifactId
        userOrg = 'libly'
        desc = project.ext.description
        licenses = ['MPL-2.0']
        issueTrackerUrl = "https://github.com/libly/resource-loader/issues"
        vcsUrl = 'https://github.com/libly/resource-loader.git'

        version {
            name = project.ext.version
            released = new java.util.Date()
            vcsTag = project.ext.version
        }
    }
}


model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.withType(Sign)
    }
    tasks.signPom {
        dependsOn tasks.generatePomFileForMavenJavaPublication
    }
}

tasks.withType(Test) {
    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
}